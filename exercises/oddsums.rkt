#lang racket

(require qi)

;; Exercise. Write a flow to sum all the odd elements in a list



























































;; Solution. Here's one way to do it:
(define-flow odd-sum
  (~> △ (pass odd?) +))

(odd-sum (list 1 2 3 4 3 7))



;; Part 2. Do it without filtering the input list (e.g. without using
;; `pass` or `filter`).
;; [Scroll down for a hint]

























































;; Hint: with lists, if you didn't have `map` or
;; `filter`, you could still emulate them using fold.
;; Scroll down for a solution.

























































(define-flow odd-sum2
  (~> △ (<< (~> (== (if odd? _ ⏚) _) +) 0)))
(odd-sum2 (list 1 2 3 4 3 7))

;; TODO: probably not. This is just a contrived solution.
;; Come up with a more natural exercise for folds.
